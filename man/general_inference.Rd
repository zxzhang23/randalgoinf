% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/general_inference.R
\name{general_inference}
\alias{general_inference}
\title{General Inference for Randomized Algorithms that involve several runs of the algorithms}
\usage{
general_inference(
  theta_m,
  theta_b_list,
  tau_m,
  tau_b,
  method = "subrand",
  alpha = 0.1
)
}
\arguments{
\item{theta_m}{Large size approximation solution (main estimate)}

\item{theta_b_list}{List of small size solutions (reduced-size estimates)}

\item{tau_m}{Convergence speed parameter for large size solution}

\item{tau_b}{Convergence speed parameter for small size solutions}

\item{method}{Inference method: "subrand", "plugin", or "multirun"}

\item{alpha}{Significance level for confidence intervals (default 0.10 for 90\% CI)}
}
\value{
List containing:
\item{method}{The inference method used}
\item{point_estimate}{Point estimate of the target parameter}
\item{confidence_interval}{Confidence interval as a vector of length 2}
\item{coverage_probability}{Nominal coverage probability (1 - alpha)}
}
\description{
Performs sub-randomization, multi-run plug-in, and multi-run aggregation inference
  for general randomized algorithms given large and small size solutions with 
  convergence rate parameters.
}
\examples{
# Example 1: Hadamard sketch-and-solve
# TARGET: True OLS solution obtained from full data
set.seed(123)
n <- 1000; p <- 50
X <- matrix(rnorm(n * p), n, p)
beta <- runif(p, 0, 1)
y <- X \%*\% beta + rnorm(n, sd = 0.1)
c_vec <- c(1, 1, 1, rep(0, p-3))  # Linear combination of first 3 coordinates

# Calculate true target: OLS solution with full data
ols_beta <- qr.solve(X, y)
true_target_ols <- sum(c_vec * ols_beta)

# Algorithm parameters
m <- 300  # Large sketch size
b <- 100  # Small sketch size

# Main estimate (large sketch)
main_sketch <- ske_hadamard(X, y, m, c_vec)
theta_m <- main_sketch$linear_combination

# Reduced-size estimates (small sketches)
theta_b_list <- list()
K <- 50  # Number of reduced-size estimates
for (k in 1:K) {
  sub_sketch <- ske_hadamard(X, y, b, c_vec)
  theta_b_list[[k]] <- sub_sketch$linear_combination
}

# Convergence parameters for Hadamard sketching
n_eff <- 2^ceiling(log2(n))
tau_m <- sqrt((m - p) * (n_eff - p) / (n_eff - m))
tau_b <- sqrt((b - p) * (n_eff - p) / (n_eff - b))

# Apply general inference
result <- general_inference(theta_m, theta_b_list, tau_m, tau_b, method = "subrand")
cat("True target (OLS):", round(true_target_ols, 3), "\\n")
cat("90\% CI:", round(result$confidence_interval, 3), "\\n")

# Apply plug-in method (asymptotic normality holds)
plugin_result <- general_inference(theta_m, theta_b_list, tau_m, tau_b, method = "plugin")
cat("Plug-in 90\% CI:", round(plugin_result$confidence_interval, 3), "\\n")

# Example 2: PRA logistic regression  
# TARGET: True regression parameter (population parameter)
\dontrun{
set.seed(456)
d <- 5
theta_true <- seq(0, d, d/4) / d  # True population parameters
target_coef_index <- d  # Inference on last coordinate
true_target_param <- theta_true[target_coef_index]  # True population parameter
data_gen <- create_logistic_generator(theta_true)

# Algorithm parameters
m <- 10000  # Large sample size
b <- 400   # Small sample size
lr_main <- 0.5 * (1:m)^(-0.505)
lr_sub <- 0.5 * (1:b)^(-0.505)

# Get main estimate (large sample size)
main_result <- PRA_logistic(lr_main, m, data_gen, d, average = TRUE)
theta_m <- main_result$averaged_weights[target_coef_index]

# Get reduced-size estimates 
theta_b_list <- list()
K <- 50  # Number of reduced-size estimates
for (k in 1:K) {
  sub_result <- PRA_logistic(lr_sub, b, data_gen, d, average = TRUE)
  theta_b_list[[k]] <- sub_result$averaged_weights[target_coef_index]
}

# Convergence parameters for PRA (sqrt rate)
tau_m <- sqrt(m)
tau_b <- sqrt(b)

# Apply general inference
pra_result <- general_inference(theta_m, theta_b_list, tau_m, tau_b, method = "subrand")
cat("True target (population param):", true_target_param, "\\n")
cat("Point estimate:", round(pra_result$point_estimate, 3), "\\n")
cat("90\% CI:", round(pra_result$confidence_interval, 3), "\\n")
}
} 