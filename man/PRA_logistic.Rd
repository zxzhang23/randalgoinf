% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pra_logistic.R
\name{PRA_logistic}
\alias{PRA_logistic}
\title{PRA Stochastic Gradient Descent for Logistic Regression}
\usage{
PRA_logistic(
  learning_rate,
  num_iterations,
  data_generator,
  dimension,
  average = TRUE,
  burnin = NULL,
  start_point = NULL
)
}
\arguments{
\item{learning_rate}{Vector of learning rates for each iteration}

\item{num_iterations}{Number of SGD iterations}

\item{data_generator}{Function that generates data points (should return list with X and y)}

\item{dimension}{Dimension of the parameter space}

\item{average}{Whether to use PRA (default = TRUE)}

\item{burnin}{Number of burn-in iterations (default = round(num_iterations / 1000))}

\item{start_point}{Starting point for optimization (default = NULL, uses zero)}
}
\value{
List containing:
\item{final_weights}{Final weight vector}
\item{averaged_weights}{PRA weight vector (if average = TRUE)}
\item{iterations}{Number of iterations performed}
}
\description{
Performs stochastic gradient descent with Polyak-Ruppert averaging for 
logistic regression. This function uses a provided data generation function to 
simulate streaming logistic regression.
}
\examples{
# Define a data generation function based on true population parameters
# TARGET: True regression parameter (population parameter)
set.seed(123)
d <- 5
theta_true <- seq(0, d, d/4) / d  # True population parameters
data_gen <- create_logistic_generator(theta_true)

num_iter <- 1000
learning_rates <- 0.5 * (1:num_iter)^(-0.505)

# Run PRA SGD
result <- PRA_logistic(learning_rates, num_iter, data_gen, d)
cat("True target (population param):", round(theta_true, 3), "\\n")
cat("Estimated coefficients:", round(result$averaged_weights, 3), "\\n")

} 